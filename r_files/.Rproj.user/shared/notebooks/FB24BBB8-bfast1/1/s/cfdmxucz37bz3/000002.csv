"0","TSF_main <- function(d, nptperyear = 23, cache = T){"
"0","    ## 1. Prepare inputs"
"0","    #sitename <- d$site[1]"
"0","    nyear <- floor(nrow(d)/nptperyear)"
"0","    npt   <- nyear * nptperyear"
"0","    d <- d[1:npt, ]"
"0","    # pls make sure it's complete year in input"
"0",""
"0","    file_y   <- sprintf(""TSM_%s_y.txt"", sitename)"
"0","    file_w   <- sprintf(""TSM_%s_w.txt"", sitename)"
"0","    file_set <- sprintf(""TSM_%s.set"", sitename)"
"0",""
"0","    write_input(d$y  , file_y, nptperyear)"
"0","    write_input(d$SummaryQA %>% as.numeric(), file_w, nptperyear)"
"0",""
"0","    ## 2. Update options"
"0","    options <- list("
"0","       job_name            = """","
"0","       file_y              = file_y,             # Data file list/name"
"0","       file_w              = file_w,             # Mask file list/name"
"0","       nyear_and_nptperear = c(nyear, nptperyear),      # No. years and no. points per year"
"0","       ylu                 = c(0, 9999),     # Valid data range (lower upper)"
"0","       qc_1                = c(0, 0, 1),     # Quality range 1 and weight"
"0","       qc_2                = c(1, 1, 0.5),   # Quality range 2 and weight"
"0","       qc_3                = c(2, 3, 0.2),   # Quality range 3 and weight"
"0","       A                   = 0.1,            # Amplitude cutoff value"
"0","       output_type         = c(1, 1, 0),     # Output files (1/0 1/0 1/0), 1: seasonality data; 2: smoothed time-series; 3: original time-series"
"0","       seasonpar           = 1.0,            # Seasonality parameter (0-1)"
"0","       iters               = 2,              # No. of envelope iterations (3/2/1)"
"0","       FUN                 = 2,              # Fitting method (1/2/3): (SG/AG/DL)"
"0","       half_win            = 7,              # half Window size for Sav-Gol."
"0","       meth_pheno          = 1,              # (1: seasonal amplitude, 2: absolute value, 3: relative amplitude, 4: STL trend)"
"0","       trs                 = c(0.5, 0.5)     # Season start / end values"
"0","    )"
"0",""
"0","    #options$job_name <- sitename"
"0",""
"0","    opt <- update_setting(options)"
"0","    write_setting(opt, file_set)"
"0",""
"0","    TSF_process(file_set) # call TSF_process.exe"
"0",""
"0","    file_tts <- sprintf(""%s_fit.tts"", opt$job_name)"
"0","    file_tpa <- sprintf(""%s_TS.tpa"", opt$job_name)"
"0",""
"0","    # note: only suit for ascii"
"0","    tidy_tts <- function(d_tts){"
"0","        sites <- d_tts$row %>% paste0(""v"", .)"
"0","        npt   <- ncol(d_tts) - 2"
"0","        d <- d_tts %>% {.[, 3:ncol(.)]} %>% as.matrix() %>% t() %>% data.frame() %>%"
"0","            set_colnames(sites) %>% cbind(t = 1:npt, .)"
"0","        d"
"0","    }"
"0",""
"0","    d_tts <- read_tts(file_tts) %>% tidy_tts()"
"0","    d_tpa <- read_tpa(file_tpa)"
"0",""
"0","    if (!cache){"
"0","        status1 <- file.remove(c(file_tts, file_tpa, file_y, file_w, file_set))"
"0","        status2 <- dir(""."", ""*.ndx"", full.names = T) %>% file.remove()"
"0","    }"
"0","    list(fit = d_tts, pheno = d_tpa)"
"0","}"
