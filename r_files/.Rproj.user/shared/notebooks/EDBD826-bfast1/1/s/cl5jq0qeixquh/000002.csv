"0","```r
TSF_main <- function(d, nptperyear = 23, cache = T){
    ## 1. Prepare inputs
    #sitename <- d$site[1]
    nyear <- floor(nrow(d)/nptperyear)
    npt   <- nyear * nptperyear
    d <- d[1:npt, ]
    # pls make sure it's complete year in input

    file_y   <- sprintf(\"TSM_%s_y.txt\", sitename)
    file_w   <- sprintf(\"TSM_%s_w.txt\", sitename)
    file_set <- sprintf(\"TSM_%s.set\", sitename)

    write_input(d$y  , file_y, nptperyear)
    write_input(d$SummaryQA %>% as.numeric(), file_w, nptperyear)

    ## 2. Update options
    options <- list(
       job_name            = \"\",
       file_y              = file_y,             # Data file list/name
       file_w              = file_w,             # Mask file list/name
       nyear_and_nptperear = c(nyear, nptperyear),      # No. years and no. points per year
       ylu                 = c(0, 9999),     # Valid data range (lower upper)
       qc_1                = c(0, 0, 1),     # Quality range 1 and weight
       qc_2                = c(1, 1, 0.5),   # Quality range 2 and weight
       qc_3                = c(2, 3, 0.2),   # Quality range 3 and weight
       A                   = 0.1,            # Amplitude cutoff value
       output_type         = c(1, 1, 0),     # Output files (1/0 1/0 1/0), 1: seasonality data; 2: smoothed time-series; 3: original time-series
       seasonpar           = 1.0,            # Seasonality parameter (0-1)
       iters               = 2,              # No. of envelope iterations (3/2/1)
       FUN                 = 2,              # Fitting method (1/2/3): (SG/AG/DL)
       half_win            = 7,              # half Window size for Sav-Gol.
       meth_pheno          = 1,              # (1: seasonal amplitude, 2: absolute value, 3: relative amplitude, 4: STL trend)
       trs                 = c(0.5, 0.5)     # Season start / end values
    )

    #options$job_name <- sitename

    opt <- update_setting(options)
    write_setting(opt, file_set)

    TSF_process(file_set) # call TSF_process.exe

    file_tts <- sprintf(\"%s_fit.tts\", opt$job_name)
    file_tpa <- sprintf(\"%s_TS.tpa\", opt$job_name)

    # note: only suit for ascii
    tidy_tts <- function(d_tts){
        sites <- d_tts$row %>% paste0(\"v\", .)
        npt   <- ncol(d_tts) - 2
        d <- d_tts %>% {.[, 3:ncol(.)]} %>% as.matrix() %>% t() %>% data.frame() %>%
            set_colnames(sites) %>% cbind(t = 1:npt, .)
        d
    }

    d_tts <- read_tts(file_tts) %>% tidy_tts()
    d_tpa <- read_tpa(file_tpa)

    if (!cache){
        status1 <- file.remove(c(file_tts, file_tpa, file_y, file_w, file_set))
        status2 <- dir(\".\", \"*.ndx\", full.names = T) %>% file.remove()
    }
    list(fit = d_tts, pheno = d_tpa)
}
```"
